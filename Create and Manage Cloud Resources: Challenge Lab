#Task 1. Create a project jumphost instance

Navigation menu > Compute engine > VM Instance
Change Series to N1.

Name the instance Instance name .
Use an f1-micro machine type.
Use the default image type (Debian Linux).


#Task 2. Create a Kubernetes service cluster

gcloud config set compute/zone us-east1-b

gcloud container clusters create nucleus-jumphost-108-webserver1

gcloud container clusters get-credentials nucleus-jumphost-108-webserver1

kubectl create deployment hello-app --image=gcr.io/google-samples/hello-app:2.0

kubectl expose deployment hello-app --type=LoadBalancer --port 8080

kubectl get service 


#Task 3. Set up an HTTP load balancer

cat << EOF > startup.sh
#! /bin/bash
apt-get update
apt-get install -y nginx
service nginx start
sed -i -- 's/nginx/Google Cloud Platform - '"\$HOSTNAME"'/' /var/www/html/index.nginx-debian.html
EOF

1 .Create an instance template :

gcloud compute instance-templates create web-server-template \
          --metadata-from-file startup-script=startup.sh \
          --network nucleus-vpc \
          --machine-type g1-small \
          --region us-east1

2 .Create a target pool :

gcloud compute target-pools create nginx-pool

3 .Create a managed instance group :

gcloud compute instance-groups managed create web-server-group \
          --base-instance-name web-server \
          --size 2 \
          --template web-server-template \
          --region us-east1


4 .Create a firewall rule to allow traffic (80/tcp) :

gcloud compute firewall-rules create permit-tcp-rule-108 \
          --allow tcp:80 \
          --network nucleus-vpc



5 .Create a health check :

gcloud compute http-health-checks create http-basic-check
gcloud compute instance-groups managed \
          set-named-ports web-server-group \
          --named-ports http:80 \
          --region us-east1
      

6 .Create a backend service and attach the manged instance group :


gcloud compute backend-services create web-server-backend \
          --protocol HTTP \
          --http-health-checks http-basic-check \
          --global

gcloud compute backend-services add-backend web-server-backend \
          --instance-group web-server-group \
          --instance-group-region us-east1 \
          --global
      

7 .Create a URL map and target HTTP proxy to route requests to your URL map :


gcloud compute url-maps create web-server-map \
          --default-service web-server-backend

gcloud compute target-http-proxies create http-lb-proxy \
          --url-map web-server-map


8 .Create a forwarding rule :


gcloud compute forwarding-rules create permit-tcp-rule-261 \
        --global \
        --target-http-proxy http-lb-proxy \
        --ports 80
gcloud compute forwarding-rules list
